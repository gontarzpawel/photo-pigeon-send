package testutil

import (
	"os"
	"testing"
)

// Test image constants
const (
	TestDataDir       = "../testdata"
	NoExifImagePath   = "../testdata/without_exif.jpg"
	WithExifImagePath = "../testdata/with_exif.jpg"
)

// SetupTestImages creates necessary test images for unit tests
func SetupTestImages(t *testing.T) {
	// Create test directory if it doesn't exist
	if err := os.MkdirAll(TestDataDir, 0755); err != nil {
		t.Fatalf("Failed to create test directory: %v", err)
	}

	// Create a simple JPEG without EXIF data
	createNoExifImage(t)
}

// CreateNoExifImage creates a minimal valid JPEG with no EXIF data
func createNoExifImage(t *testing.T) {
	// Minimal valid JPEG (1x1 pixel)
	noExifData := []byte{
		0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
		0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
		0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x0B, 0x08, 0x00, 0x01, 0x00,
		0x01, 0x01, 0x01, 0x11, 0x00, 0xFF, 0xC4, 0x00, 0x14, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xFF, 0xC4, 0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 0x3F, 0x00, 0x37,
		0xFF, 0xD9,
	}

	if err := os.WriteFile(NoExifImagePath, noExifData, 0644); err != nil {
		t.Fatalf("Failed to create test image: %v", err)
	}
}

// CleanupTestImages removes test images after tests
func CleanupTestImages(t *testing.T) {
	filesToRemove := []string{
		NoExifImagePath,
	}

	for _, path := range filesToRemove {
		if err := os.Remove(path); err != nil && !os.IsNotExist(err) {
			t.Errorf("Failed to clean up test file %s: %v", path, err)
		}
	}
}

// CheckTestImageExists checks if a test image exists and skips the test if not
func CheckTestImageExists(t *testing.T, path string, skipMessage string) {
	if _, err := os.Stat(path); os.IsNotExist(err) {
		t.Skip(skipMessage)
	}
}
